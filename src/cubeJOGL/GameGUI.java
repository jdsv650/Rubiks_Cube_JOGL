/* James Donner
 * GameGUI.java
 * Last modified: 4/10/11
 * The main interface: starts the game and presents user interface
 */
package cubeJOGL;

import com.sun.opengl.util.Animator;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Arrays;
import javax.media.opengl.GLCanvas;
import javax.media.opengl.GLCapabilities;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.WindowConstants;
import javax.swing.border.BevelBorder;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;

/**
 * Class starts the game and supplies the user interface.
 */
public class GameGUI extends JFrame {

    static {
        // set the popup-menues so they display properly on top of the GLCanvas
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
    }
    private GLRenderer cubeRend;       //GLRendering context.
    private KeyHandler keyHandler;     //for keyboard input
    private MouseHandler mouseHandler; //assist with mouse input
    private CubeFiler cubeFiler;       //IO
    private PlayerList pList;          //list of players
    private Animator animator;         //new thread

    /**
     * Start the game.
     */
    public GameGUI() {
        char[] pass = new char[20];
        pass[0] = '0';
        pass[1] = '0';
        pass[2] = '0';
        pass[3] = '0';
        cubeFiler = new CubeFiler();
        pList = cubeFiler.inputAllPlayers();
        initComponents();
        setTitle("Rubik's Cube");
        cubeRend = new GLRenderer(pList.getPlayer(0, pass));
        keyHandler = new KeyHandler(cubeRend);
        mouseHandler = new MouseHandler(cubeRend, this);
        canvas.addGLEventListener(cubeRend);
        canvas.addKeyListener(keyHandler);
        animator = new Animator(canvas);

        // This is a workaround for the GLCanvas not adjusting its size, when the frame is resized.
        canvas.setMinimumSize(new Dimension());
        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                // Run this on another thread than the AWT event queue to
                // make sure the call to Animator.stop() completes before
                // exiting
                new Thread(new Runnable() {

                    public void run() {
                        animator.stop();
                        System.exit(0);
                    }
                }).start();
            }
        });
    }

    @Override
    public void setVisible(boolean show) {
        if (!show) {
            animator.stop();
        }
        super.setVisible(show);
        if (!show) {
            animator.start();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new ButtonGroup();
        buttonGroup2 = new ButtonGroup();
        buttonGroup3 = new ButtonGroup();
        buttonGroup4 = new ButtonGroup();
        jOptionPane1 = new JOptionPane();
        jOptionPanelDeleteErr = new JOptionPane();
        jOptionPaneErrorDefaultPass = new JOptionPane();
        jOptionPanePasswordChangeOK = new JOptionPane();
        jOptionPaneCheckPass = new JOptionPane();
        canvas = new GLCanvas(createGLCapabilites());
        jPanel1 = new JPanel();
        jButtonF1 = new JButton();
        jButtonF4 = new JButton();
        jButtonF7 = new JButton();
        jButtonF2 = new JButton();
        jButtonF5 = new JButton();
        jButtonF8 = new JButton();
        jButtonF3 = new JButton();
        jButtonF9 = new JButton();
        jButtonF6 = new JButton();
        jButtonR1 = new JButton();
        jButtonR4 = new JButton();
        jButtonR7 = new JButton();
        jButtonR2 = new JButton();
        jButtonR5 = new JButton();
        jButtonR8 = new JButton();
        jButtonR3 = new JButton();
        jButtonR6 = new JButton();
        jButtonR9 = new JButton();
        jLabelBackgroundCubeImage = new JLabel();
        jSlider1 = new JSlider();
        jLabelSlowFast = new JLabel();
        jPanelLogin = new JPanel();
        jPasswordField1 = new JPasswordField();
        jComboBoxSelectAddPlayer = new JComboBox();
        for(int i=0; i < pList.getPlayerListSize(); i++) {
            jComboBoxSelectAddPlayer.addItem(pList.getPlayerNoCred(i).getName());
        }
        jLabelPassword = new JLabel();
        labelSelectAddPlayer = new JLabel();
        jButtonLoginOK = new JButton();
        jMenuBar1 = new JMenuBar();
        jMenuGame = new JMenu();
        jMenuItemNewGame = new JMenuItem();
        jMenuPlayer = new JMenu();
        jMenuItemDeletePlayer = new JMenuItem();
        jMenuItemUpdatePass = new JMenuItem();
        jMenuItemExit = new JMenuItem();
        jMenuCube = new JMenu();
        jMenuPerspectiveView = new JMenu();
        jRadioButtonMenuItemPerspViewTFR = new JRadioButtonMenuItem();
        jRadioButtonMenuItemPerspViewBBL = new JRadioButtonMenuItem();
        jMenuSideView = new JMenu();
        jRadioButtonMenuItemSideViewBBL = new JRadioButtonMenuItem();
        jRadioButtonMenuItemSideViewTFR = new JRadioButtonMenuItem();
        jMenuRotate = new JMenu();
        jRadioButtonMenuItemRotateNo = new JRadioButtonMenuItem();
        jRadioButtonMenuItemRotateX = new JRadioButtonMenuItem();
        jRadioButtonMenuItemRotateY = new JRadioButtonMenuItem();
        jRadioButtonMenuItemRotateZ = new JRadioButtonMenuItem();
        jMenu1 = new JMenu();
        jRadioButtonMenuItemAnimRotOn = new JRadioButtonMenuItem();
        jRadioButtonMenuItemAnimRotOff = new JRadioButtonMenuItem();
        jMenuHelp = new JMenu();
        jMenuItemHelpContents = new JMenuItem();
        jMenuItemAddPlayer = new JMenuItem();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(640, 480));
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), "Cube Rotation Controls", TitledBorder.CENTER, TitledBorder.BELOW_TOP));
        jPanel1.setLayout(new AbsoluteLayout());

        jButtonF1.setContentAreaFilled(false);
        jButtonF1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF1MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF1MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF1, new AbsoluteConstraints(20, 120, 20, 24));

        jButtonF4.setContentAreaFilled(false);
        jButtonF4.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF4MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF4MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF4, new AbsoluteConstraints(30, 154, 18, 20));

        jButtonF7.setContentAreaFilled(false);
        jButtonF7.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF7MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF7MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF7, new AbsoluteConstraints(30, 180, 18, 22));

        jButtonF2.setContentAreaFilled(false);
        jButtonF2.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF2MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF2MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF2, new AbsoluteConstraints(40, 140, 20, 20));

        jButtonF5.setContentAreaFilled(false);
        jButtonF5.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF5MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF5MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF5, new AbsoluteConstraints(49, 170, 20, 18));

        jButtonF8.setContentAreaFilled(false);
        jButtonF8.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF8MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF8MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF8, new AbsoluteConstraints(50, 190, 18, 24));

        jButtonF3.setContentAreaFilled(false);
        jButtonF3.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF3MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF3MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF3, new AbsoluteConstraints(70, 154, 18, 24));

        jButtonF9.setContentAreaFilled(false);
        jButtonF9.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF9MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF9MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF9, new AbsoluteConstraints(70, 210, 18, 18));

        jButtonF6.setContentAreaFilled(false);
        jButtonF6.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonF6MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonF6MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonF6, new AbsoluteConstraints(70, 179, 18, 24));

        jButtonR1.setContentAreaFilled(false);
        jButtonR1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR1MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR1MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR1, new AbsoluteConstraints(90, 154, 18, 24));

        jButtonR4.setContentAreaFilled(false);
        jButtonR4.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR4MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR4MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR4, new AbsoluteConstraints(90, 180, 18, 24));

        jButtonR7.setContentAreaFilled(false);
        jButtonR7.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR7MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR7MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR7, new AbsoluteConstraints(90, 210, 18, 18));

        jButtonR2.setContentAreaFilled(false);
        jButtonR2.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR2MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR2MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR2, new AbsoluteConstraints(110, 140, 20, 20));

        jButtonR5.setContentAreaFilled(false);
        jButtonR5.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR5MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR5MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR5, new AbsoluteConstraints(110, 170, 20, 18));

        jButtonR8.setContentAreaFilled(false);
        jButtonR8.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR8MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR8MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR8, new AbsoluteConstraints(110, 190, 18, 24));

        jButtonR3.setContentAreaFilled(false);
        jButtonR3.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR3MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR3MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR3, new AbsoluteConstraints(130, 120, 20, 24));

        jButtonR6.setContentAreaFilled(false);
        jButtonR6.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR6MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR6MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR6, new AbsoluteConstraints(130, 154, 18, 20));

        jButtonR9.setContentAreaFilled(false);
        jButtonR9.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent evt) {
                jButtonR9MousePressed(evt);
            }
            public void mouseReleased(MouseEvent evt) {
                jButtonR9MouseReleased(evt);
            }
        });
        jPanel1.add(jButtonR9, new AbsoluteConstraints(130, 180, 18, 22));

        jLabelBackgroundCubeImage.setIcon(new ImageIcon(getClass().getResource("/cubeJOGL/cube_control_med.png"))); // NOI18N
        jPanel1.add(jLabelBackgroundCubeImage, new AbsoluteConstraints(20, 90, 150, 150));

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(5);
        jSlider1.setMinimum(1);
        jSlider1.setPaintTicks(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(3);
        jSlider1.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        jPanel1.add(jSlider1, new AbsoluteConstraints(40, 50, 90, 40));

        jLabelSlowFast.setText("Slower        Faster");
        jPanel1.add(jLabelSlowFast, new AbsoluteConstraints(40, 34, -1, 20));

        jPanelLogin.setBorder(BorderFactory.createTitledBorder(BorderFactory.createBevelBorder(BevelBorder.LOWERED), "User", TitledBorder.CENTER, TitledBorder.TOP));

        jPasswordField1.setText("jPass");
        jPasswordField1.setCursor(new Cursor(Cursor.TEXT_CURSOR));
        jPasswordField1.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });

        jComboBoxSelectAddPlayer.setEditable(true);
        jComboBoxSelectAddPlayer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jComboBoxSelectAddPlayerActionPerformed(evt);
            }
        });

        jLabelPassword.setText("Password");

        labelSelectAddPlayer.setText("Select/Add Player");

        jButtonLoginOK.setText("Login");
        jButtonLoginOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jButtonLoginOKActionPerformed(evt);
            }
        });

        GroupLayout jPanelLoginLayout = new GroupLayout(jPanelLogin);
        jPanelLogin.setLayout(jPanelLoginLayout);
        jPanelLoginLayout.setHorizontalGroup(
            jPanelLoginLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelLoginLayout.createParallelGroup(Alignment.LEADING)
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jLabelPassword, GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                        .addGap(38, 38, 38))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jPasswordField1, GroupLayout.PREFERRED_SIZE, 110, GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addComponent(labelSelectAddPlayer)
                        .addContainerGap(63, Short.MAX_VALUE))
                    .addGroup(jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jComboBoxSelectAddPlayer, 0, 110, Short.MAX_VALUE)
                        .addGap(38, 38, 38))
                    .addGroup(Alignment.TRAILING, jPanelLoginLayout.createSequentialGroup()
                        .addComponent(jButtonLoginOK)
                        .addGap(57, 57, 57))))
        );
        jPanelLoginLayout.setVerticalGroup(
            jPanelLoginLayout.createParallelGroup(Alignment.LEADING)
            .addGroup(jPanelLoginLayout.createSequentialGroup()
                .addComponent(jLabelPassword)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jPasswordField1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(labelSelectAddPlayer)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxSelectAddPlayer, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(jButtonLoginOK)
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenuGame.setText("Game");

        jMenuItemNewGame.setIcon(new ImageIcon(getClass().getResource("/cubeJOGL/cube_icon.png"))); // NOI18N
        jMenuItemNewGame.setText("New Game");
        jMenuItemNewGame.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemNewGameActionPerformed(evt);
            }
        });
        jMenuGame.add(jMenuItemNewGame);

        jMenuPlayer.setText("Current Player");

        jMenuItemDeletePlayer.setText("Delete");
        jMenuItemDeletePlayer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemDeletePlayerActionPerformed(evt);
            }
        });
        jMenuPlayer.add(jMenuItemDeletePlayer);

        jMenuItemUpdatePass.setText("Update Password");
        jMenuItemUpdatePass.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemUpdatePassActionPerformed(evt);
            }
        });
        jMenuPlayer.add(jMenuItemUpdatePass);

        jMenuGame.add(jMenuPlayer);

        jMenuItemExit.setText("Exit (Save All)");
        jMenuItemExit.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuGame.add(jMenuItemExit);

        jMenuBar1.add(jMenuGame);

        jMenuCube.setText("Cube");

        jMenuPerspectiveView.setText("Perspective View");

        buttonGroup1.add(jRadioButtonMenuItemPerspViewTFR);
        jRadioButtonMenuItemPerspViewTFR.setSelected(true);
        jRadioButtonMenuItemPerspViewTFR.setText("Top, Front, Right");
        jRadioButtonMenuItemPerspViewTFR.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemPerspViewTFRActionPerformed(evt);
            }
        });
        jMenuPerspectiveView.add(jRadioButtonMenuItemPerspViewTFR);

        buttonGroup1.add(jRadioButtonMenuItemPerspViewBBL);
        jRadioButtonMenuItemPerspViewBBL.setText("Bottom, Back, Left");
        jRadioButtonMenuItemPerspViewBBL.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemPerspViewBBLActionPerformed(evt);
            }
        });
        jMenuPerspectiveView.add(jRadioButtonMenuItemPerspViewBBL);

        jMenuCube.add(jMenuPerspectiveView);

        jMenuSideView.setText("Side View(s)");

        buttonGroup2.add(jRadioButtonMenuItemSideViewBBL);
        jRadioButtonMenuItemSideViewBBL.setSelected(true);
        jRadioButtonMenuItemSideViewBBL.setText("Bottom, Back, Left");
        jRadioButtonMenuItemSideViewBBL.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemSideViewBBLActionPerformed(evt);
            }
        });
        jMenuSideView.add(jRadioButtonMenuItemSideViewBBL);

        buttonGroup2.add(jRadioButtonMenuItemSideViewTFR);
        jRadioButtonMenuItemSideViewTFR.setText("Top, Front, Right");
        jRadioButtonMenuItemSideViewTFR.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemSideViewTFRActionPerformed(evt);
            }
        });
        jMenuSideView.add(jRadioButtonMenuItemSideViewTFR);

        jMenuCube.add(jMenuSideView);

        jMenuRotate.setText("Rotate Cube on X,Y,Z");

        buttonGroup3.add(jRadioButtonMenuItemRotateNo);
        jRadioButtonMenuItemRotateNo.setSelected(true);
        jRadioButtonMenuItemRotateNo.setText("No Rotation");
        jRadioButtonMenuItemRotateNo.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemRotateNoActionPerformed(evt);
            }
        });
        jMenuRotate.add(jRadioButtonMenuItemRotateNo);

        buttonGroup3.add(jRadioButtonMenuItemRotateX);
        jRadioButtonMenuItemRotateX.setText("X Axis");
        jRadioButtonMenuItemRotateX.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemRotateXActionPerformed(evt);
            }
        });
        jMenuRotate.add(jRadioButtonMenuItemRotateX);

        buttonGroup3.add(jRadioButtonMenuItemRotateY);
        jRadioButtonMenuItemRotateY.setText("Y Axis");
        jRadioButtonMenuItemRotateY.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemRotateYActionPerformed(evt);
            }
        });
        jMenuRotate.add(jRadioButtonMenuItemRotateY);

        buttonGroup3.add(jRadioButtonMenuItemRotateZ);
        jRadioButtonMenuItemRotateZ.setText("Z Axis");
        jRadioButtonMenuItemRotateZ.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemRotateZActionPerformed(evt);
            }
        });
        jMenuRotate.add(jRadioButtonMenuItemRotateZ);

        jMenuCube.add(jMenuRotate);

        jMenu1.setText("Animate Slice Rotations");

        buttonGroup4.add(jRadioButtonMenuItemAnimRotOn);
        jRadioButtonMenuItemAnimRotOn.setSelected(true);
        jRadioButtonMenuItemAnimRotOn.setText("On");
        jRadioButtonMenuItemAnimRotOn.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemAnimRotOnActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItemAnimRotOn);

        buttonGroup4.add(jRadioButtonMenuItemAnimRotOff);
        jRadioButtonMenuItemAnimRotOff.setText("Off");
        jRadioButtonMenuItemAnimRotOff.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jRadioButtonMenuItemAnimRotOffActionPerformed(evt);
            }
        });
        jMenu1.add(jRadioButtonMenuItemAnimRotOff);

        jMenuCube.add(jMenu1);

        jMenuBar1.add(jMenuCube);

        jMenuHelp.setText("Help");

        jMenuItemHelpContents.setText("Rotation Controls");
        jMenuItemHelpContents.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemHelpContentsActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpContents);

        jMenuItemAddPlayer.setText("Add Player");
        jMenuItemAddPlayer.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemAddPlayerActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemAddPlayer);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(canvas, GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addPreferredGap(ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(jPanelLogin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addComponent(canvas, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanelLogin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(ComponentPlacement.RELATED)
                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonF1MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF1MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF1MousePressed

    private void jButtonF1MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF1MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF1MouseReleased

    private void jRadioButtonMenuItemPerspViewTFRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemPerspViewTFRActionPerformed
        mouseHandler.jRadioButtonMenuItemPerspViewTFRActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemPerspViewTFRActionPerformed

    private void jRadioButtonMenuItemPerspViewBBLActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemPerspViewBBLActionPerformed
        mouseHandler.jRadioButtonMenuItemPerspViewBBLActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemPerspViewBBLActionPerformed

    private void jMenuItemNewGameActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemNewGameActionPerformed
        mouseHandler.jMenuItemNewGameActionPerformed(evt);
    }//GEN-LAST:event_jMenuItemNewGameActionPerformed

    private void jRadioButtonMenuItemSideViewTFRActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemSideViewTFRActionPerformed
        mouseHandler.jRadioButtonMenuItemSideViewTFRActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemSideViewTFRActionPerformed

    private void jRadioButtonMenuItemSideViewBBLActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemSideViewBBLActionPerformed
        mouseHandler.jRadioButtonMenuItemSideViewBBLActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemSideViewBBLActionPerformed

    private void formWindowClosing(WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cubeFiler.outputAllPlayers(pList);
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItemExitActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        cubeFiler.outputAllPlayers(pList);
        System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonF2MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF2MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF2MousePressed

    private void jButtonF2MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF2MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF2MouseReleased

    private void jButtonF3MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF3MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF3MousePressed

    private void jButtonF3MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF3MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF3MouseReleased

    private void jButtonF4MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF4MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF4MousePressed

    private void jButtonF4MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF4MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF4MouseReleased

    private void jButtonF5MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF5MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF5MousePressed

    private void jButtonF5MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF5MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF5MouseReleased

    private void jButtonF6MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF6MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF6MousePressed

    private void jButtonF6MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF6MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF6MouseReleased

    private void jButtonF7MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF7MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF7MousePressed

    private void jButtonF7MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF7MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF7MouseReleased

    private void jButtonF8MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF8MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF8MousePressed

    private void jButtonF8MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF8MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF8MouseReleased

    private void jButtonF9MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonF9MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonF9MousePressed

    private void jButtonF9MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonF9MouseReleased
        mouseHandler.jButtonFMouseReleased(evt);
    }//GEN-LAST:event_jButtonF9MouseReleased

    private void jButtonR1MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR1MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR1MousePressed

    private void jButtonR1MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR1MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR1MouseReleased

    private void jButtonR2MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR2MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR2MousePressed

    private void jButtonR2MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR2MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR2MouseReleased

    private void jButtonR3MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR3MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR3MousePressed

    private void jButtonR3MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR3MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR3MouseReleased

    private void jButtonR4MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR4MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR4MousePressed

    private void jButtonR4MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR4MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR4MouseReleased

    private void jButtonR5MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR5MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR5MousePressed

    private void jButtonR5MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR5MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR5MouseReleased

    private void jButtonR6MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR6MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR6MousePressed

    private void jButtonR6MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR6MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR6MouseReleased

    private void jButtonR7MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR7MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR7MousePressed

    private void jButtonR7MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR7MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR7MouseReleased

    private void jButtonR8MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR8MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR8MousePressed

    private void jButtonR8MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR8MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR8MouseReleased

    private void jButtonR9MousePressed(MouseEvent evt) {//GEN-FIRST:event_jButtonR9MousePressed
        mouseHandler.jButtonMousePressed(evt);
    }//GEN-LAST:event_jButtonR9MousePressed

    private void jButtonR9MouseReleased(MouseEvent evt) {//GEN-FIRST:event_jButtonR9MouseReleased
        mouseHandler.jButtonRMouseReleased(evt);
    }//GEN-LAST:event_jButtonR9MouseReleased

    private void jComboBoxSelectAddPlayerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jComboBoxSelectAddPlayerActionPerformed
        JComboBox cb = (JComboBox) evt.getSource();
        CubeMain tempCube = new CubeMain();
        Player newPlayer, p;
        String temp = "";
        char[] newPass = {'0', '0', '0', '0'};
        char[] passAsChar; // = new char[20];

        temp = (String) cb.getSelectedItem();
        if ("comboBoxEdited".equals(evt.getActionCommand())) {
            // entered a new name
            for (int i = 0; i < pList.getPlayerListSize(); i++) {
                if (temp.equalsIgnoreCase(pList.getPlayerNoCred(i).getName())) {
                    return;  // duplicate user
                }
            }
            cb.addItem(temp);  // user does not exist
            tempCube.buildCube();
            newPlayer = new Player(pList.getPlayerListSize() + 1, temp, tempCube, newPass);
            pList.addPlayer(newPlayer);
            cubeRend.setPlayer(newPlayer);
            cubeRend.init(canvas);
            // Default User Skip login
        } else if ("comboBoxChanged".equals(evt.getActionCommand())) {
            if (temp.equalsIgnoreCase("Default User")) {
                System.out.println("IN Deafult user skip login");
                p = pList.getPlayerNoCred(0);
                cubeRend.setPlayer(p);
                cubeRend.clearAllAnimatedSlices();
                cubeRend.init(canvas);
                return;
            }
            // User has selected an item
            /****************
            for (int i = 0; i < pList.getPlayerListSize(); i++) {
            if (temp.equalsIgnoreCase(pList.getPlayerNoCred(i).getName())) {
            //Changed player read password
            System.out.println("Read/check credentials here");
            JPasswordField jPF = new JPasswordField(20);
            jOptionPane1.showConfirmDialog(this, jPF, "Password:", JOptionPane.OK_CANCEL_OPTION);
            passAsChar = Arrays.copyOf(jPF.getPassword(), 20);
            System.out.println("Password read == " + passAsChar.toString());
            if (Arrays.equals(passAsChar, (pList.getPlayerNoCred(i).getPass()))) {
            p = pList.getPlayerNoCred(i);
            cubeM.setPlayer(p);
            cubeM.clearAllAnimatedSlices();
            cubeM.init(canvas);
            } else {
            System.out.println("Invalid password");
            cb.setSelectedIndex(cubeM.getPlayerNumber() - 1);
            return;
            }
            }
            }
             ***********************/
        }
    }//GEN-LAST:event_jComboBoxSelectAddPlayerActionPerformed

    private void jMenuItemDeletePlayerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeletePlayerActionPerformed
        // int index = jComboBoxSelectAddPlayer.getSelectedIndex();
        int index = cubeRend.getPlayerNumber();

        Player p;
        if (index == 1) { //playerNumber == 1
            String errorMsg = "Can't delete Default User\n";
            jOptionPanelDeleteErr.showMessageDialog(this, errorMsg, "Error Removing Player",
                    JOptionPane.ERROR_MESSAGE);
        } else {  //index >=2
            pList.deletePlayer(index - 1);  //player num verse actual index
            for (int i = 1; i < pList.getPlayerListSize(); i++) {//skip default
                pList.getPlayerNoCred(i).setNumber(i + 1); //reset player num
            }
            p = pList.getPlayerNoCred(0);
            cubeRend.setPlayer(p);
            cubeRend.clearAllAnimatedSlices();
            cubeRend.init(canvas);
            jComboBoxSelectAddPlayer.removeItemAt(index - 1);
            jComboBoxSelectAddPlayer.setSelectedIndex(0); //set 0 1st
            //  for (int j = 0; j < pList.getPlayerListSize(); j++) {
            //      System.out.println(pList.getPlayerNoCred(j).getName()
            //              + " player number = " + pList.getPlayerNoCred(j).getNumber());
            //  }
            return;
        }
    }//GEN-LAST:event_jMenuItemDeletePlayerActionPerformed

    private void jRadioButtonMenuItemAnimRotOnActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAnimRotOnActionPerformed
        mouseHandler.jRadioButtonMenuItemAnimRotOnActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemAnimRotOnActionPerformed

    private void jRadioButtonMenuItemAnimRotOffActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemAnimRotOffActionPerformed
        mouseHandler.jRadioButtonMenuItemAnimRotOffActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemAnimRotOffActionPerformed

    private void jRadioButtonMenuItemRotateNoActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemRotateNoActionPerformed
        mouseHandler.jRadioButtonMenuItemRotateNoActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemRotateNoActionPerformed

    private void jRadioButtonMenuItemRotateXActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemRotateXActionPerformed
        mouseHandler.jRadioButtonMenuItemRotateXActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemRotateXActionPerformed

    private void jRadioButtonMenuItemRotateYActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemRotateYActionPerformed
        mouseHandler.jRadioButtonMenuItemRotateYActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemRotateYActionPerformed

    private void jRadioButtonMenuItemRotateZActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jRadioButtonMenuItemRotateZActionPerformed
        mouseHandler.jRadioButtonMenuItemRotateZActionPerformed(evt);
    }//GEN-LAST:event_jRadioButtonMenuItemRotateZActionPerformed

    private void jMenuItemHelpContentsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpContentsActionPerformed
        String controlMessage = "Click on any hand, drag it and release.\n"
                + "The cube slice will rotate in the direction it was pulled.";
        jOptionPane1.showMessageDialog(this, controlMessage, "Slice Rotation",
                JOptionPane.INFORMATION_MESSAGE, new ImageIcon(getClass().getResource("/cubeJOGL/hand_20_20.png")));
    }//GEN-LAST:event_jMenuItemHelpContentsActionPerformed

    private void jPasswordField1ActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        String user;
        int index;
        char[] pass = new char[20];

        //ONLY FOR CURRENT PLAYER CHECK THIS NOT SELECTED PLAYER IN COMBO BOX
        index = cubeRend.getPlayerNumber() - 1;
        pass = Arrays.copyOf(jPasswordField1.getPassword(), 20);
        JComboBox cb = jComboBoxSelectAddPlayer;
        user = (String) cb.getSelectedItem();  //check this also

        if (cb.isEnabled()) {
            System.out.println("Error can't update password: combo box enabled");
            return;
        }

        if (index == 0) {
            jOptionPaneErrorDefaultPass.showMessageDialog(this, "Can't change Default User password", "Error changing password", JOptionPane.ERROR_MESSAGE);
        } else {
            //  if (user.compareToIgnoreCase(pList.getPlayerNoCred(index).getName()) == 0) {
            pList.updatePlayerPass(index, pass);
            jOptionPanePasswordChangeOK.showMessageDialog(this, "Password updated successfully for user: "
                    + pList.getPlayerNoCred(index).getName(), "Change Password", JOptionPane.ERROR_MESSAGE);
            // }
        }

        cb.setEnabled(true);
        jButtonLoginOK.setEnabled(true);
        labelSelectAddPlayer.setEnabled(true);
        jLabelPassword.setText("Password");
        jComboBoxSelectAddPlayer.requestFocusInWindow();
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jButtonLoginOKActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jButtonLoginOKActionPerformed
        Player p;
        String user;
        JComboBox cb = jComboBoxSelectAddPlayer;
        char[] pass = new char[20];
        // get user and password selected
        String temp = (String) cb.getSelectedItem();
        pass = Arrays.copyOf(jPasswordField1.getPassword(), 20);
        // user has selected an item
        for (int i = 0; i < pList.getPlayerListSize(); i++) {
            if (temp.equalsIgnoreCase(pList.getPlayerNoCred(i).getName())) {
                //changed player check password
                if (Arrays.equals(pass, (pList.getPlayerNoCred(i).getPass()))) {
                    System.out.println("OK password match");
                    p = pList.getPlayerNoCred(i);
                    cubeRend.setPlayer(p);
                    cubeRend.clearAllAnimatedSlices();
                    cubeRend.init(canvas);
                    jPasswordField1.setText(null);
                } else {
                    System.out.println("Invalid password");
                    cb.setSelectedIndex(cubeRend.getPlayerNumber() - 1);
                    jPasswordField1.setText(null);
                    return;
                }
            }
        }
    }//GEN-LAST:event_jButtonLoginOKActionPerformed

    private void jMenuItemUpdatePassActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemUpdatePassActionPerformed
        jComboBoxSelectAddPlayer.setEnabled(false);
        jButtonLoginOK.setEnabled(false);
        labelSelectAddPlayer.setEnabled(false);
        jLabelPassword.setText("Enter new password");
    }//GEN-LAST:event_jMenuItemUpdatePassActionPerformed

    private void jSlider1StateChanged(ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        JSlider source = (JSlider) evt.getSource();
        if (!source.getValueIsAdjusting()) {
            int speed = source.getValue(); //1,2,3,4 or 5
            // System.out.println("Speed = " + speed);
            cubeRend.setSpeed(speed);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    private void jMenuItemAddPlayerActionPerformed(ActionEvent evt) {//GEN-FIRST:event_jMenuItemAddPlayerActionPerformed
        String controlMessage = "New player is issued a password of 0000";
        jOptionPane1.showMessageDialog(this, controlMessage, "Add Player",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAddPlayerActionPerformed

    /**
     * Called from within initComponents().
     * hint: to customize the generated code choose 'Customize Code' in the contextmenu
     * of the selected UI Component you wish to cutomize in design mode.
     * @return Returns customized GLCapabilities.
     */
    private GLCapabilities createGLCapabilites() {

        GLCapabilities capabilities = new GLCapabilities();
        capabilities.setHardwareAccelerated(true);

        // try to enable 2x anti aliasing - should be supported on most hardware
        capabilities.setNumSamples(2);
        capabilities.setSampleBuffers(true);

        return capabilities;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private ButtonGroup buttonGroup1;
    private ButtonGroup buttonGroup2;
    private ButtonGroup buttonGroup3;
    private ButtonGroup buttonGroup4;
    private GLCanvas canvas;
    public JButton jButtonF1;
    public JButton jButtonF2;
    public JButton jButtonF3;
    public JButton jButtonF4;
    public JButton jButtonF5;
    public JButton jButtonF6;
    public JButton jButtonF7;
    public JButton jButtonF8;
    public JButton jButtonF9;
    private JButton jButtonLoginOK;
    public JButton jButtonR1;
    public JButton jButtonR2;
    public JButton jButtonR3;
    public JButton jButtonR4;
    public JButton jButtonR5;
    public JButton jButtonR6;
    public JButton jButtonR7;
    public JButton jButtonR8;
    public JButton jButtonR9;
    protected JComboBox jComboBoxSelectAddPlayer;
    private JLabel jLabelBackgroundCubeImage;
    private JLabel jLabelPassword;
    private JLabel jLabelSlowFast;
    private JMenu jMenu1;
    private JMenuBar jMenuBar1;
    private JMenu jMenuCube;
    private JMenu jMenuGame;
    private JMenu jMenuHelp;
    private JMenuItem jMenuItemAddPlayer;
    private JMenuItem jMenuItemDeletePlayer;
    private JMenuItem jMenuItemExit;
    private JMenuItem jMenuItemHelpContents;
    private JMenuItem jMenuItemNewGame;
    private JMenuItem jMenuItemUpdatePass;
    private JMenu jMenuPerspectiveView;
    private JMenu jMenuPlayer;
    private JMenu jMenuRotate;
    private JMenu jMenuSideView;
    private JOptionPane jOptionPane1;
    private JOptionPane jOptionPaneCheckPass;
    private JOptionPane jOptionPaneErrorDefaultPass;
    private JOptionPane jOptionPanePasswordChangeOK;
    private JOptionPane jOptionPanelDeleteErr;
    private JPanel jPanel1;
    private JPanel jPanelLogin;
    protected JPasswordField jPasswordField1;
    private JRadioButtonMenuItem jRadioButtonMenuItemAnimRotOff;
    private JRadioButtonMenuItem jRadioButtonMenuItemAnimRotOn;
    private JRadioButtonMenuItem jRadioButtonMenuItemPerspViewBBL;
    private JRadioButtonMenuItem jRadioButtonMenuItemPerspViewTFR;
    private JRadioButtonMenuItem jRadioButtonMenuItemRotateNo;
    private JRadioButtonMenuItem jRadioButtonMenuItemRotateX;
    private JRadioButtonMenuItem jRadioButtonMenuItemRotateY;
    private JRadioButtonMenuItem jRadioButtonMenuItemRotateZ;
    private JRadioButtonMenuItem jRadioButtonMenuItemSideViewBBL;
    private JRadioButtonMenuItem jRadioButtonMenuItemSideViewTFR;
    private JSlider jSlider1;
    private JLabel labelSelectAddPlayer;
    // End of variables declaration//GEN-END:variables
}
